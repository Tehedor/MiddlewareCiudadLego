--- 
components: 
  schemas: 


    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    ############ ############ LegoCity 
    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    LegoCity:
      title: "LegoCity"
      allOf:
        - $ref: "https://smart-data-models.github.io/dataModel.Building/Building/model.yaml#/Building"

    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    ############ ############ Entities 
    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    # This is reduced list of the defined building categories within
    # the Smart AgriFood domain
    BuildingLegoCategories: 
      enum:
        - legoStreetLight
        - legoTrain
        - legoRadar
        - legoRailoadSwitch
        - legoToll
        - legoCrane
        - legoWheaterStation
        
      description: |
        - `legoStreetLight` -  A street light, light pole, lamppost, street lamp, light standard, or lamp standard is a raised source of light on the edge of a road or path.
        - `legoTrain` - A train is a form of rail transport consisting of a series of connected vehicles that generally run along a railroad track to transport cargo or passengers.
        - `legoRadar` - Radar is a detection system that uses radio waves to determine the range, angle, or velocity of objects.
        - `legoRailoadSwitch` - A railroad switch, turnout, or points is a mechanical installation enabling railway trains to be guided from one track to another, such as at a railway junction or where a spur or siding branches off.
        - `legoToll` - A toll road, also known as a turnpike or tollway, is a public or private road for which a fee is assessed for passage.
        - `legoCrane` - A crane is a type of machine, generally equipped with a hoist rope, wire ropes or chains, and sheaves, that can be used both to lift and lower materials and to move them horizontally.
        - `legoWheaterStation` - A weather station is a facility, either on land or sea, with instruments and equipment for measuring atmospheric conditions to provide information for weather forecasts and to study the weather and climate.

      type: string
      externalDocs: 
        url: "https://wiki.openstreetmap.org/wiki/Map_Features#Building"
      x-ngsi: 
        uri-prefix: "https://wiki.openstreetmap.org/wiki/Tag:building%3D"



    # This is the base definition of a building
    # LegoStreetLight: 
    # LegoTrain:
    # LegoRadar:
    # LegoRailoadSwitch:
    # LegoToll:
    # LegoCrane:
    # LegoWheaterStation:
    
    LegoBuilding:
      description: >
        A LegoBuilging is a structure/building made from lego pieces, which can be a train station, a traffic light, a crane, a weather station, a radar, a railroad switch or a toll booth.  
      properties:
        alternateName:
          description: An alternative name for this item
          type: string
          x-ngsi:
            type: Property
        category:
          description: 'The category of the LegoBuilding.  Enum:'' legoStreetLight, legoTrain, legoRadar, legoRailoadSwitch, legoToll, legoCrane, legoWheaterStation '''
          items:
            enum:
              - legoStreetLight
              - legoTrain
              - legoRadar
              - legoRailoadSwitch
              - legoToll
              - legoCrane
              - legoWheaterStation
            type: string
          type: array
          x-ngsi:
            type: Property
        collapseRisk:
          description: Probability of total collapse of the building
          maximum: 1
          minimum: 0
          type: number
          x-ngsi:
            model: https://schema.org/Number
            type: Property
        coordinatesOnLegoCity:
          description: The coordinates of the LegoBuilding in the LegoCity
          type: object
          x-ngsi:
            type: GeoProperty
          properties:
            coordinates:
              type: array
              minItems: 2
              items:
                type: number
                minimum: -100
                maximum: 100
        dataProvider:
          description: A sequence of characters identifying the provider of the harmonised data entity
          type: string
          x-ngsi:
            type: Property
        dateCreated:
          description: Entity creation timestamp. This will usually be allocated by the storage platform
          format: date-time
          type: string
          x-ngsi:
            type: Property
        dateModified:
          description: Timestamp of the last modification of the entity. This will usually be allocated by the storage platform
          format: date-time
          type: string
          x-ngsi:
            type: Property

        description:
          description: A description of this item
          type: string
          x-ngsi:
            type: Property
        floorsAboveGround:
          description: Floors above the ground level
          type: number
          x-ngsi:
            model: https://schema.org/Number
            type: Property
        floorsBelowGround:
          description: Floors below the ground level
          type: number
          x-ngsi:
            model: https://schema.org/Number
            type: Property
        id:
          anyOf:
            - description: Identifier format of any NGSI entity
              maxLength: 256
              minLength: 1
              pattern: ^[\w\-\.\{\}\$\+\*\[\]`|~^@!,:\\]+$
              type: string
              x-ngsi:
                type: Property
            - description: Identifier format of any NGSI entity
              format: uri
              type: string
              x-ngsi:
                type: Property
          description: Unique identifier of the entity
          x-ngsi:
            type: Property


        mapUrl:
          anyOf:
            - description: Identifier format of any NGSI entity
              maxLength: 256
              minLength: 1
              pattern: ^[\w\-\.\{\}\$\+\*\[\]`|~^@!,:\\]+$
              type: string
              x-ngsi:
                type: Property
            - description: Identifier format of any NGSI entity
              format: uri
              type: string
              x-ngsi:
                type: Property
          description: Reference to the map containing the building
          x-ngsi:
            type: Relationship
        name:
          description: The name of this item
          type: string
          x-ngsi:
            type: Property
        occupier:
          description: Person or entity using the building
          items:
            anyOf:
              - description: Identifier format of any NGSI entity
                maxLength: 256
                minLength: 1
                pattern: ^[\w\-\.\{\}\$\+\*\[\]`|~^@!,:\\]+$
                type: string
                x-ngsi:
                  type: Property
              - description: Identifier format of any NGSI entity
                format: uri
                type: string
                x-ngsi:
                  type: Property
            description: Unique identifier of the entity
            x-ngsi:
              type: Property
          type: array
          x-ngsi:
            model: https://schema.org/URL
            type: Relationship
        openingHours:
          description: Opening hours of this building
          items:
            type: string
          type: array
          x-ngsi:
            model: https://schema.org/openingHours
            type: Property
        owner:
          description: A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)
          items:
            anyOf:
              - description: Identifier format of any NGSI entity
                maxLength: 256
                minLength: 1
                pattern: ^[\w\-\.\{\}\$\+\*\[\]`|~^@!,:\\]+$
                type: string
                x-ngsi:
                  type: Property
              - description: Identifier format of any NGSI entity
                format: uri
                type: string
                x-ngsi:
                  type: Property
            description: Unique identifier of the entity
            x-ngsi:
              type: Property
          type: array
          x-ngsi:
            type: Property
        peopleCapacity:
          description: Allowed people present at the building
          minimum: 0
          type: number
          x-ngsi:
            model: https://schema.org/Number
            type: Property
        peopleOccupancy:
          description: People present at the building
          minimum: 0
          type: number
          x-ngsi:
            model: https://schema.org/Number
            type: Property
        seeAlso:
          description: list of uri pointing to additional resources about the item
          oneOf:
            - items:
                format: uri
                type: string
              minItems: 1
              type: array
            - format: uri
              type: string
          x-ngsi:
            type: Property
        source:
          description: 'A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object'
          type: string
          x-ngsi:
            type: Property
        type:
          description: NGSI Entity type
          enum:
            - LegoBuilding
          type: string
          x-ngsi:
            type: Property
      required:
        - type
        - id
        - category
      type: object
      x-derived-from: https://github.com/smart-data-models/dataModel.Building/blob/master/Building/LICENSE.md
      x-model-tags: ""
      x-version: 0.0.3

    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    ############ ############ Sensors 
    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    
    #PIR 
    PirSensor:
      type: object
      required:
        -  presence
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device

      description: >
        A device that consists of a sensor, has category `saref:Sensor` and is used to detect the presence of a person in a room.

      properties:
        presence:
          x-ngsi:
            uri: https://w3id.org/saref#Occupancy
            model: 'https://schema.org/Text'
          type: string
          description: 'Presence of a person in the room, either HIGH or LOW ["unitCode": "none"]'


    # Photoresistor
    PhotoresistorSensor:
      type: object
      required:
        - lightIntensity
        - dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
      description: >
        A device that consists of a sensor, has category `saref:Sensor` and is used to detect the light intensity.

      properties:
        lightIntensity:
          x-ngsi:
            uri: https://w3id.org/saref#IlluminanceUnit
            model: 'https://schema.org/Number'
          type: number
          description: 'Light intensity detected by the photoresistor sensor, 0 to 255 ["unitCode": "none"]'


    # Potentiometer
    PotentiometerSensor:
      type: object
      required:
        -  velocityControl
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
      
      description: >
        A device that consists of a sensor, has category `saref:Sensor` and is used to detect the position of a switch to select the engine speed, it has values from 0 to 128.
      properties:
        velocityControl:
          x-ngsi:
            uri: https://w3id.org/saref#LevelControlFunction
            model: 'https://schema.org/Number'
          type: integer
          description: 'Position of the switch to select the engine speed, it has values from 0 to 128 ["unitCode": "none"]'

    # Infrared
    InfraredSensor:
      type: object
      required:
        -  presence
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
      description: >
        A device that consists of a sensor, has category `saref:Sensor` and is used to detect if a train passes by a point.
      
      properties:
        presence:
          x-ngsi:
            uri: https://w3id.org/saref#Occupancy
            model: 'https://schema.org/Text'
          type: string
          description: 'HIGH if pass a train o LOW if not pass a train ["unitCode": "none"]'


    # Switch
    SwitchSensor:
      type: object
      required:
        -  state
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device

      description: >
        A device that consists of a sensor, has category `saref:Sensor` and is used to detect the state of a switch, on or off.

      properties:
        state:
          x-ngsi:
            uri: https://w3id.org/saref#OnOffState
            model: 'https://schema.org/Text'
          type: string
          description: 'State of the switch, either on or off ["unitCode": "none"]'
      



    # # RFID
    RfidSensor:
      type: object
      required:
        -  uiddcode
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device

      description: >
        A device that consists of a sensor is categorized as `saref:Sensor` and is used to detect an object based on a tag.

      properties:
        uiddcode:
          x-ngsi:
            uri: https://schema.org/leiCode
            model: 'https://schema.org/Text'
          type: string
          description: 'Unique identifier of the object detected by the RFID sensor ["unitCode": "none"]'



    # # Ultrasond
    UltrasondSensor:
      type: object
      required:
        -  distance
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
      
      description: >
        A device that consists of a sensor, has categor7y `saref:Sensor` and is used to calculate the distance by ultrasound, where the distance to the object can be calculated from a time interval.

      properties:
        distance:
            x-ngsi:
              model: https://schema.org/Distance
              type: Property
            type: number
            description: 'Location of this device represented by a distance from a starting point. ["unitCode": "CMT" (centimeters) or "MTR" (meters)]'



    # Temperature
    TemperatureSensor:
      type: object
      required:
        -  temperature
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device

      description: >
        A device that consists of a sensor, has category `saref:Sensor` and is used for the purpose of sensing temperature`.
      
      properties:
        temperature:
          # $ref: https://fiware.github.io/tutorials.NGSI-LD/models/saref-terms.yaml#/temperature
          # https://w3id.org/saref#TemperatureSensor
            x-ngsi:
              uri: 'https://w3id.org/saref#temperature'
              model: 'https://schema.org/Number'  
            type: number
            format: float
            description: 'Property related to some measurements that are characterized by a certain value that is measured in a temperature unit (degree_Celsius, degree_Fahrenheit, or degree_kelvin), ["unitCode": "CEL" - {Degree Celsius (°C)}, "FAH" - {Degree Fahrenheit (°F)}, "KEL" - {Kelvin (K)}, "N12" - {Degree Réaumur (°Ré)}, or "A48" - {Degree Rankine (°R)}]'


    # Humidity
    HumiditySensor:
      type: object
      required:
        -  humidity
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device

      description: >
        A device that consists of a sensor, has category `saref:Sensor` and is used for the purpose of sensing humidity`.

      properties:
        humidity:
          x-ngsi:
            uri: 'https://w3id.org/saref#Humidity'
            model: 'https://schema.org/Number'
          type: number
          format: float
          description: 'Property related to some measurements that are characterized by a certain value that is measured in a humidity unit (percentage), ["unitCode": "P1" (percentage)]'

    
    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    ############ ############ Actuators 
    ############ ############ ############ ############ ############ ############ ############ ############ ############ 

    LedDetection:
      type: object
      required:
        -  stateLed
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
      description: >
        A device that consists of an actuator, has category `saref:Actuator` and is used to represent the state of a led, on or off.
      properties:
        stateLed:
          description: 'A observed or reported value. For actuator devices, it is an attribute that allows a controlling application to change the actuation setting. For instance, a switch device which is currently _on_ can report a value ''on'' of type ''Text''. Obviously, in order to toggle the referred switch, this attribute value will have to be changed to ''off'''
          type: string
          x-ngsi:
            model: https://schema.org/QuantitativeValue
            type: Property

    Light:
      type: object
      required:
        -  stateLight
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
      description: >
        A device that consists of an actuator, has category `saref:Actuator` and is used to represent the state of a light, on or off.
      properties:
        stateLight:
          description: 'A observed or reported value. For actuator devices, it is an attribute that allows a controlling application to change the actuation setting. For instance, a switch device which is currently _on_ can report a value ''on'' of type ''Text''. Obviously, in order to toggle the referred switch, this attribute value will have to be changed to ''off'''
          type: string
          x-ngsi:
            model: https://schema.org/QuantitativeValue
            type: Property

    EngineDC:
      type: object
      required:
        -  velocityEngine
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
      description: >
        A device that consists of an actuator, has category `saref:Actuator` and is used to represent the velocity of a train engine.
      properties:
        velocityEngine:
          # description: 'A observed or reported value. For actuator devices, it is an attribute that allows a controlling application to change the actuation setting. For instance, a switch device which is currently _on_ can report a value ''on'' of type ''Text''. Obviously, in order to toggle the referred switch, this attribute value will have to be changed to ''off'''
          # 'Position of the switch to select the engine speed, it has values from 0 to 128 ["unitCode": "none"]'
          description: 'Position of the switch to select the engine speed, it has values from 0 to 128'
          type: string
          x-ngsi:
            model: https://schema.org/QuantitativeValue
            type: Property

    Camera:
      type: object
      required:
        -  on
        -  startDateTime
        -  mediaURL
      allOf:
        # - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
        - $ref: https://smart-data-models.github.io/dataModel.Device/Camera/model.yaml#/Camera

    Servmotor:
      type: object
      required:
        -  stateMotor
        -  dateLastValueReported
      allOf:
        - $ref: https://fiware.github.io/tutorials.NGSI-LD/models/device.yaml#/Device
      # El motor tiene dos estados 1 = via servicio y 0 = via normal
      description: >
        A device that consists of an actuator, has category `saref:Actuator` and is used to represent the state of a motor, 1 = via service or 2 = via normal.
      properties:
        stateMotor:
          # description: 'A observed or reported value. For actuator devices, it is an attribute that allows a controlling application to change the actuation setting. For instance, a switch device which is currently _on_ can report a value ''on'' of type ''Text''. Obviously, in order to toggle the referred switch, this attribute value will have to be changed to ''off'''
          description: 'State of the motor, 1 = via service or 2 = via normal'
          type: string
          x-ngsi:
            model: https://schema.org/QuantitativeValue
            type: Property
            




    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    ############ ############ ############ ############ ############ ############ ############ ############ ############ 
    ############ ############ ############ ############ ############ ############ ############ ############ ############ 

info: 
  description: "Model Definitions for an Agricultural Smart System"
  title: Smart Agri Data Models
  version: "1.0.0"
openapi: "3.0.0"


# These paths are merely representative.
paths: 
  /ngsi-ld/v1/entities: 
    get: 
      responses: 
        ? "200"
        : 
          description:  OK
          content: 
            application/ld+json: 
              schema: 
                type: object
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SergioTejedor/Lego_Models/1.0.0