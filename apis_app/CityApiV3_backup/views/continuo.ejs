<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Black+Ops+One&family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
        rel="stylesheet">
    
    <title>Continuo</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>

<body>

    <h3 style="text-align: center;  font-family: Kanit, sans-serif;">Monitor de sensores</h3>
    <h4 style="text-align: center; font-family: Kanit, sans-serif;"> Datos en iteración del sensor <p
            style="color: mediumorchid; display: inline;">
            <%= numid %>
        </p>
    </h4>
    <table id="sensorDataTable" class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Momento de la medición</th>
                <th>Valor</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <script>
        var numid = '<%= numid %>'; // Asegúrate de que 'numid' esté disponible en tu plantilla EJS

        // Mapeo de tipos de sensores a propiedades de datos
        var sensorDataProperties = {
            'https://uri.fiware.org/ns/data-models#TemperatureSensor': 'https://w3id.org/saref#temperature',
            'https://uri.fiware.org/ns/data-models#HumiditySensor': 'https://w3id.org/saref#Humidity',
            'https://uri.fiware.org/ns/data-models#Servmotor': 'https://uri.fiware.org/ns/data-models#stateMotor',
            'https://uri.etsi.org/ngsi-ld/default-context/UltrasoundSensor': 'https://uri.fiware.org/ns/data-models#distance',
            'https://uri.fiware.org/ns/data-models#PhotoresistorSensor': 'https://uri.etsi.org/ngsi-ld/default-context/light',
            'https://uri.fiware.org/ns/data-models#PirSensor': 'https://w3id.org/saref#Occupancy',
            'https://uri.fiware.org/ns/data-models#PotentiometerSensor': 'https://w3id.org/saref#LevelControlFunction',
            'https://uri.fiware.org/ns/data-models#InfraredSensor': 'https://w3id.org/saref#Occupancy',
            'https://uri.fiware.org/ns/data-models#SwitchSensor': 'https://w3id.org/saref#OnOffState',
            'https://uri.fiware.org/ns/data-models#RfidSensor': 'https://schema.org/leiCode',
            'https://uri.fiware.org/ns/data-models#LedDetection': 'https://uri.fiware.org/ns/data-models#stateLed',
            'https://uri.fiware.org/ns/data-models#Light': 'https://uri.fiware.org/ns/data-models#stateLight',
            'https://uri.fiware.org/ns/data-models#EngineDC': 'https://uri.fiware.org/ns/data-models#velocityEngine',
            'https://uri.fiware.org/ns/data-models#Camera': 'https://uri.fiware.org/ns/data-models#on'
        };

        // Función para obtener datos del sensor
function obtenerDatosSensor(simple = false) {
    var url = '/tiempoReal/sensores/' + numid;
    if (simple) {
        url += '/simple'; // Añade /simple a la URL si se solicita el mensaje simple
    }

    $.ajax({
        url: url,
        method: 'GET',
        success: function (data) {
            console.log(data);

            var tableBody = document.getElementById('sensorDataTable').getElementsByTagName('tbody')[0];
            var row = tableBody.insertRow(-1);
            var cell1 = row.insertCell(0);
            var cell2 = row.insertCell(1);

            // Verificar si el tipo de sensor está mapeado
            var sensorDataProperty = sensorDataProperties[data.type];
            if (!sensorDataProperty) {
                console.error('Error: Tipo de sensor no reconocido:', data.type);
                return;
            }

            var sensorValue = data[sensorDataProperty] ? data[sensorDataProperty].value : 'Valor no disponible';

            cell1.innerHTML = new Date().toLocaleString();
            cell2.innerHTML = sensorValue;
        },
        error: function (error) {
            console.error('Error al obtener datos del sensor:', error);
        }
    });
}


        // Obtén el intervalo de la URL, o usa un valor predeterminado si no se proporciona
        var urlParams = new URLSearchParams(window.location.search);
        var interval = urlParams.get('interval') || 5; // Usa 5 como valor predeterminado si no se proporciona un intervalo
        interval = parseInt(interval) * 1000; // Convierte el intervalo a milisegundos

        // Obtener datos del sensor cada 'interval' segundos
        setInterval(obtenerDatosSensor, interval);
    </script>
</body>

</html>