mixin styles
    style.
        li.device {
            background-repeat: no-repeat;
            background-size: 20px 20px;
            padding-left: 25px;
            padding-bottom: 2px;
            font-size: large;
        }
        ul.devices {
            list-style-type: none;
            padding: 5;
            margin: 0;
        }


mixin devicesForTrain(id)
    //- mixin devicesForStreetLight(id,entitiesPirSensor,entitiesPhotoresistorSensor,entitiesLedDetectionActuator,entitiesLigthActuator)
    //- script(src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.3.2/socket.io.min.js')
    //- script(src='https://code.jquery.com/jquery-1.11.1.js')

    div(class="card m-2")
        div.card-title
            div.row
                .col-xl-9.col-sm-12
                    strong(style="margin-left:20px") Lego Train
                    | &nbsp;
                    code(style="font-size:large") urn:ngsi-ld:LegoTrain:#{id}
        div.card-body
            ul.devices
                div.row
                    div.col-5
                        //- li(style="background-image: url('/img/warehouse-full.svg')").device
                        li.device
                            //- input(type="checkbox" id="simulate_potentiometerSensor" name="simulate_potentiometerSensor" value="simulate_potentiometerSensor" )
                            button(id="potentiometerSensorButton" class="btn") asd
                            | &nbsp;   
                            //- img(src="/img/warehouse-full.svg", alt="alt").device
                            code 
                                | &nbsp;
                                strong Potentiometer#{id}
                                | &nbsp;
                                //- span.device(id=`PirSensor:${id}`) 
                                span.potentiometer ...
                                //-   #{entitiesPirSensor.presence}
                    div.col-2
                            span.timer_potentiometerSensor ...
                    div.col-5
                        li(style="background-image: url('/img/warehouse-full.svg')").device
                            code 
                                strong EngineDC#{id}
                                | &nbsp;
                                //- span.device(id=`LedDetection:${id}`)
                                span.engineVelocity ...

    script.
        $(function () {
            //- const socket = io(controlConfigJSON.mode_containers ? '/simulatorApp' : '/');

            //- const socket = io('/simulatorApp');

            const isBehindProxy = window.location.port === "80" || window.location.port === "";
            const socket = isBehindProxy 
                ? io('', { path: '/simulatorApp/socket.io' }) 
                : io();

        
            socket.on('update_potentiometerSensor', function(controlVelocity_potentiometerSensor) {
                $('.potentiometer').text(controlVelocity_potentiometerSensor);
            });
            socket.on('update_engineDCActuator', function(velocityEngine_engineDCAtuator) {
                $('.engineVelocity').text(velocityEngine_engineDCAtuator);
            });

            socket.on('update_simulate', function(simulate) {
                state_potentiometerSensor = simulate[2];
                updatePotentiometerSensorButton(state_potentiometerSensor);
            });

        });
        
        function updatePotentiometerSensorButton(state_potentiometerSensor) {
            if (state_potentiometerSensor) {
                $('#potentiometerSensorButton').removeClass('btn-danger').addClass('btn-success').text('ON');
            } else {
                $('#potentiometerSensorButton').removeClass('btn-success').addClass('btn-danger').text('OFF');
            }
        }


        $(document).ready(function() {
            //- console.log(controlConfigJSON.potentiometer_sensor.simulate_potentiometer_sensor)
            //- updatePotentiometerSensorButton(true);
            $('#potentiometerSensorButton').click(function() {
                const currentState = $('#potentiometerSensorButton').hasClass('btn-success');
                const newState = !currentState;
                // Enviar la solicitud POST para cambiar el estado
                $.post(`${route}/train/toggle`, { state: newState }, function(response) {
                    //- updatePotentiometerSensorButton(newState);
                });
            });

            //- updatePotentiometerSensorButton(controlConfigJSON.potentiometer_sensor.simulate_potentiometer_sensor);
        });