#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();

const app = require('../app');
const http = require('http');

// process.on('SIGINT', function() {});
// process.on('SIGTERM', function() {});

process.on('SIGINT', function() {
    console.log("Caught interrupt signal");
    // Aquí puedes cerrar todas las conexiones, archivos, etc.
    // ...
    // Luego, cierra tu aplicación
    process.exit();
});

process.on('SIGTERM', function() {
    console.log("Caught terminate signal");
    // Aquí puedes cerrar todas las conexiones, archivos, etc.
    // ...
    // Luego, cierra tu aplicación
    process.exit();
});


/**
 * Get ports from environment and store in Express.
 */

const port = normalizePort(process.env.WEB_APP_PORT || '3030');
app.set('port', port);

/**
 * Create HTTP server for app
 */

const server = http.createServer(app);
global.SOCKET_IO = require('socket.io')(server);


/**
// global.SOCKET_IO = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListeningServer);



/**
 * Create HTTP server for iot devices
 */
const iot = require('../iot');
const iotPort = normalizePort(process.env.DUMMY_DEVICES_PORT || '3001');
iot.set('port', iotPort);
//iot.set('io', io);

const iotServer = http.createServer(iot);
iotServer.listen(iotPort);
iotServer.on('error', onError);
iotServer.on('listening', onListeningIoT);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningServer() {
	const addr = server.address();
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
}

function onListeningIoT() {
	const addr = iotServer.address();
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
}


// // Manejar conexiones de Socket.IO
// SOCKET_IO.on('connection', (socket) => {
//     console.log('Nuevo cliente conectado');
	

//     socket.on('disconnect', () => {
//         console.log('Cliente desconectado');
//     });
// });



// SOCKET_IO.on('change_simulate_pirSensor', (data) => {
//     simulate[0] = data;
//     console.log('change_simulate_pirSensor',simulate[0]);
// });

// SOCKET_IO.on('change_simulate_photoresistorSensor', (data) => {
//     simulate[1] = data;
//     console.log('change_simulate_photoresistorSensor',simulate[1]);
// });

// SOCKET_IO.on('change_simulate_potentiometerSensor', (data) => {
//     simulate[2] = data;
//     console.log('change_simulate_potentiometerSensor',simulate[2]);
// });

// SOCKET_IO.on('change_simulate_infraredSensor', (data) => {
//     simulate[3] = data;
//     console.log('change_simulate_infraredSensor',simulate[3]);
// });

// SOCKET_IO.on('change_simulate_switchSensor', (data) => {
//     simulate[4] = data;
//     console.log('change_simulate_switchSensor',simulate[4]);
// });

// SOCKET_IO.on('change_simulate_rfidSensor', (data) => {
//     simulate[5] = data;
//     console.log('change_simulate_rfidSensor',simulate[5]);
// });

// SOCKET_IO.on('change_simulate_ultrasoundSensor', (data) => {
//     simulate[6] = data;
//     console.log('change_simulate_ultrasoundSensor',simulate[6]);
// });

// SOCKET_IO.on('change_simulate_weatherStation', (data) => {
//     simulate[7] = data;
//     console.log('change_simulate_weatherStation',simulate[7]);
// });


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
// Manejar conexiones de Socket.IO
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
const SimulatorSensors = require('../simulation/simulateSensors');
const SimulatorActuators = require('../simulation/simulateActuators');

SOCKET_IO.on('connection', (socket) => {
    console.log('Nuevo cliente conectado');
    SimulatorSensors.iniSensorsClient();	
	SimulatorActuators.iniActuatorsClient();

    socket.on('disconnect', () => {
        console.log('Cliente desconectado');
    });
});

