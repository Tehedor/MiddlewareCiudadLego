#!/bin/bash
#
#  Command Line Interface to start all services associated with the Tutorial
#  For this tutorial the commands are merely a convenience script to run docker or docker-compose
#
#  Each services script can be run using either docker-compose (the external tool with the hyphen -) 
#  or docker compose (the newer version directly bundled with Docker with a space )
#
#  if you start up with the following command:
#
#  ./services start legacy
#
# This will force the script to use docker-compose which may be more reliable in 
# some cases (or if an older version of Docker is being used)

set -e

ORION="http://orion:1026/version"
CONTEXT="https://github.com/Tehedor/smart-LEGO-data-models/blob/main/schemas/datamodels.context-ngsi.jsonld"
CORE_CONTEXT="https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.6.jsonld"
# Models
# https://app.swaggerhub.com/apis-docs/SergioTejedor/Lego_Models/1.0.0


# dockerCmd="docker-compose"
dockerCmd="docker-compose"
# if (( $# == 2 )); then
# fi

if (( $# < 1 )); then
	echo "Illegal number of parameters"
	echo "usage: services [create|orion|scorpio|stellio|stop]"
	exit 1
fi

pause(){
	printf " "
	count="$1"
	[ "$count" -gt 59 ] && printf "Waiting one minute " || printf " Waiting a few seconds ";
	while [ "$count" -gt 0 ]
	do
		printf "."
		sleep 3
		count=$((count - 3))
	done
	echo ""
}

##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### Orion LD
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####


getHeartbeat(){
	eval "response=$(docker run --network fiware_default --rm quay.io/curl/curl:${CURL_VERSION} -s -o /dev/null -w "%{http_code}" "$1")"
}

waitForOrion () {
	echo -e "\n⏳ Waiting for \033[1;34mOrion-LD\033[0m to be available\n"
	
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-orion` == "healthy" ]
	do
		echo -e "\nContext Broker HTTP state: ${response} (waiting for 200)"
		pause 6
		getHeartbeat "${ORION}"
	done
}


waitForCoreContext () {
	echo -e "\n⏳ Checking availability of \033[1m core @context\033[0m from ETSI\n"
	eval "response=$(docker run --rm quay.io/curl/curl:${CURL_VERSION} -s -o /dev/null -w "%{http_code}" "$CORE_CONTEXT")"
	while [ "${response}" -eq 000 ]
	do
		echo -e "\n@context HTTP state: ${response} (waiting for 200)"
		pause 3
		eval "response=$(docker run --rm quay.io/curl/curl:${CURL_VERSION} -s -o /dev/null -w "%{http_code}" "$CORE_CONTEXT")"
	done
}

waitForUserContext () {
	echo -e "\n⏳ Waiting for user \033[1m@context\033[0m to be available\n"
	getHeartbeat "${CONTEXT}"
	while [ "${response}" -eq 000 ]
	do
		echo -e "\n@context HTTP state: ${response} (waiting for 200)"
		pause 3
		getHeartbeat "${CONTEXT}"
	done
}

# waitForIoTAgent () {
# 	echo -e "\n⏳ Waiting for \033[1;36mIoT-Agent\033[0m to be available\n"
# 	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-iot-agent` == "healthy" ]
# 	do
# 		echo -e "\nIoT Agent HTTP state: ${response} (waiting for 200)"
# 		pause 3
# 		getHeartbeat "${IOT_AGENT}"
# 	done
# }

waitForMongoOrion () {
	echo -e "\n⏳ Waiting for \033[1mMongoDB Orion\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mongo-orion` == "healthy" ]
	do 
		sleep 1
	done
}




stoppingContainersOrion () {
	CONTAINERS=$(docker ps --filter "label=org.fiware=orion" -aq)
	if [[ -n $CONTAINERS ]]; then 
		echo "Stopping containers"
		docker rm -f $CONTAINERS || true
	fi
	VOLUMES=$(docker volume ls -qf "label=org.fiware=orion") 
	if [[ -n $VOLUMES ]]; then 
		echo "Removing old volumes"
		docker volume rm $VOLUMES || true
	fi
	NETWORKS=$(docker network ls  --filter "label=org.fiware=orion" -q) 
	if [[ -n $NETWORKS ]]; then 
		echo "Removing orion networks"
		docker network rm $NETWORKS || true
	fi
}

##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### Draco
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####

# Draco
stoppingContainersDraco () {
	CONTAINERS=$(docker ps --filter "label=org.fiware=draco" -aq)
	if [[ -n $CONTAINERS ]]; then 
		echo "Stopping containers"
		docker rm -f $CONTAINERS || true
	fi
	VOLUMES=$(docker volume ls -qf "label=org.fiware=draco") 
	if [[ -n $VOLUMES ]]; then 
		echo "Removing old volumes"
		docker volume rm $VOLUMES || true
	fi
	NETWORKS=$(docker network ls  --filter "label=org.fiware=draco" -q) 
	if [[ -n $NETWORKS ]]; then 
		echo "Removing draco networks"
		docker network rm $NETWORKS || true
	fi
}

waitForDraco () {
	echo -e "\n⏳ Waiting for \033[1;34mDraco\033[0m to be available\n"
	
	while ! [ `docker inspect --format='{{.State.Health.Status}}' draco` == "healthy" ]
	do
		sleep 1
	done
}

# BD
waitForMysql () {
	echo -e "\n⏳ Waiting for \033[1mMySQL draco\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mysql-draco` == "healthy" ]
	do 
		sleep 1
	done
}

waitForMongoDraco () {
	echo -e "\n⏳ Waiting for \033[1mMongoDB\033[0m to be available\n"
	# while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mongo` == "healthy" ]
	while ! [ `docker inspect --format='{{.State.Health.Status}}' draco-mongo-db` == "healthy" ]
	do 
		sleep 1
	done
}

waitForPostgres () {
	echo -e "\n⏳ Waiting for \033[1mPostgreSQL\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-postgres-draco` == "healthy" ]
	do 
		sleep 1
	done
}



##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### Run
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####

displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name="$1"
	echo ""
}

command="$1"
argument="$2"
case "${command}" in
	"help")
		echo "usage: services [create|start|orion|draco|stop]"
		;;
	"orion")
		export $(cat .env | grep "#" -v)
		stoppingContainersOrion
		waitForCoreContext
		echo -e "Starting containers:  \033[1;34mOrion\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1mTutorial\033[0m, a linked data \033[1mContext\033[0m and a \033[1mMongoDB\033[0m database."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		# echo -e "- \033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		# echo -e "- \033[1mTutorial\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo -e "- Data models \033[1m@context\033[0m (Smart Lego City) is supplied externally"
		echo ""
		# ${dockerCmd} -f docker-compose/common.yml -f docker-compose/orion-ld.yml up -d --remove-orphans --renew-anon-volumes
		# ${dockerCmd} -f orion/orion-ld.yml up -d --remove-orphans --renew-anon-volumes
		${dockerCmd} -f orion/orion-ld.yml up -d --renew-anon-volumes

		# displayServices "orion|fiware"
		displayServices "orion|context"
		# displayServices "orion"
		waitForMongoOrion
		# addDatabaseIndex
		# addIoTDatabaseIndex
		waitForOrion
		export CONTEXT_BROKER=orion:1026
		# loadData
		# waitForIoTAgent

		echo -e "\033[1;34m${command}\033[0m is now running and exposed on localhost:${EXPOSED_PORT}"
		;;
	
	"draco")
		export $(cat .env | grep "#" -v)
		stoppingContainersDraco
		echo -e "Starting containers:  \033[1mDraco and a \033[1mMySQL\033[0m database."
		echo ""
		${dockerCmd} -f draco/draco-mysql.yml up -d --renew-anon-volumes
		# ${dockerCmd} -f draco/draco-mongo.yml up -d --renew-anon-volumes
		
		displayServices "draco"

		waitForMysql
		# waitForMongoDraco
		waitForDraco
		;;
	"draco-mysql")
		export $(cat .env | grep "#" -v)
		stoppingContainersDraco
		echo -e "Starting containers:  \033[1mDraco and a \033[1mMySQL\033[0m database."
		echo ""
		${dockerCmd} -f draco/draco-mysql.yml up -d --renew-anon-volumes
		displayServices "draco"
		waitForMysql
		waitForDraco
		;;
	"draco-mongo")
		export $(cat .env | grep "#" -v)
		stoppingContainersDraco
		echo -e "Starting containers:  \033[1mDraco and a \033[1mMongoDB\033[0m database."
		echo ""
		${dockerCmd} -f draco/draco-mongo.yml up -d --renew-anon-volumes
		displayServices "draco"
		waitForMongoDraco
		waitForDraco
		;;
	"draco-postgres")
		export $(cat .env | grep "#" -v)
		stoppingContainersDraco
		echo -e "Starting containers:  \033[1mDraco and a \033[1mPostgreSQL\033[0m database."
		echo ""
		${dockerCmd} -f draco/draco-postgres.yml up -d --renew-anon-volumes
		displayServices "draco"
		waitForPostgres
		waitForDraco
		;;
	"stop-orion")
		export $(cat .env | grep "#" -v)
		stoppingContainersOrion
		;;

	"stop-draco")
		export $(cat .env | grep "#" -v)
		stoppingContainersDraco
		;;

	"stop")
		export $(cat .env | grep "#" -v)
		stoppingContainersOrion
		stoppingContainersDraco
		;;
	"start")
		export $(cat .env | grep "#" -v) 
		./services orion 
		
		if [[ $argument == "mysql" ]]; then
			./services draco-mysql
		elif [[ $argument == "postgres" ]]; then
			./services draco-postgres
		else
			./services draco-mongo
		fi

		;;
	"create")
		export $(cat .env | grep "#" -v)
		echo "Pulling Docker images"
		docker pull -q quay.io/curl/curl:${CURL_VERSION}
		${dockerCmd} -f orion/orion-ld.yml pull
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|start|orion|draco|stop]"
		exit 127;
		;;
esac



