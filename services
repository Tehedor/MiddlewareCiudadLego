#!/bin/bash
#
#  Command Line Interface to start all services associated with the Tutorial
#  For this tutorial the commands are merely a convenience script to run docker or docker compose
#
#  Each services script can be run using either docker compose (the external tool with the hyphen -) 
#  or docker compose (the newer version directly bundled with Docker with a space )
#
#  if you start up with the following command:
#
#  ./services start legacy
#
# This will force the script to use docker compose which may be more reliable in 
# some cases (or if an older version of Docker is being used)

set -e

# export $(grep -v '^#' .env | grep -v '^$' | xargs)
export $(cat .env | grep "#" -v)



ORION="http://orion:1026/version"
# ORION="http://localhost:1026/version"
CONTEXT="https://github.com/Tehedor/smart-LEGO-data-models/blob/main/schemas/datamodels.context-ngsi.jsonld"
CORE_CONTEXT="https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.6.jsonld"
# Models
# https://app.swaggerhub.com/apis-docs/SergioTejedor/Lego_Models/1.0.0


dockerCmd="docker compose"


if (( $# < 1 )); then
	echo "Illegal number of parameters"
	echo -e "usage: ./services [create|start|stop\n\t\torion|stop-orion\n\t\tdraco|draco-mysql|draco-mongo|draco-postgres|stop-draco\n\t\tsimulator|simulator-marta]"
	exit 1
fi

pause(){
	printf " "
	count="$1"
	[ "$count" -gt 59 ] && printf "Waiting one minute " || printf " Waiting a few seconds ";
	while [ "$count" -gt 0 ]
	do
		printf "."
		sleep 3
		count=$((count - 3))
	done
	echo ""
}

# Load environment file variables for services
source ./zz_env_services/config_env_files.sh

# wait & stop functions
source ./services_aux_functions.sh

##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### Run
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name="$1"
	echo ""
}

command="$1"
argument="$2"
case "${command}" in
	"help")
		echo -e "usage: ./services [create|start|stop\n\t\torion|stop-orion\n\t\tdraco|draco-mysql|draco-mongo|draco-postgres|stop-draco\n\t\tsimulator|simulator-marta]"
		;;
	"build")
        echo "Descargando y construyendo todas las imágenes necesarias..."
        ${dockerCmd} ${envFileOrion} -f orion/orion-ld.yml pull
        ${dockerCmd} ${envFileDraco} -f draco/draco-mongo.yml pull
        ${dockerCmd} ${envFileProxyReverse} -f proxy-reverse/nginx-reverse.yml pull
		docker pull -q node:22.12.0
		docker pull -q node:20.14.0
		docker pull -q redis:8.0.2
		docker pull -q mysql:9.3.0
		docker pull -q minio/minio:RELEASE.2024-11-07T00-52-20Z-cpuv1
		exit 0
        ;;
	"orion")
		stoppingContainersOrion
		waitForCoreContext
		echo -e "Starting containers:  \033[1;34mOrion\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1mTutorial\033[0m, a linked data \033[1mContext\033[0m and a \033[1mMongoDB\033[0m database."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		echo -e "- Data models \033[1m@context\033[0m (Smart Lego City) is supplied externally"		
		echo ""

		${dockerCmd} ${envFileOrion} -f orion/orion-ld.yml up -d --renew-anon-volumes

		displayServices "orion|context"
		waitForMongoOrion
		waitForOrion
		./services subs-control-app 

		echo -e "\033[1;34m${command}\033[0m is now running and exposed on localhost:${EXPOSED_PORT}"
		;;
	"draco")
		stoppingContainersDraco
		echo -e "Starting containers:  \033[1mDraco and a \033[1mMySQL\033[0m database."
		echo ""
		${dockerCmd}  ${envFileDraco} -f draco/draco-mongo.yml up -d --renew-anon-volumes
		
		displayServices "draco"
		waitForMongoDraco
		waitForDraco
		waitForDracoInit
  		docker rm fiware-draco-init-1 > /dev/null 2>&1 || echo "⚠️ No se pudo eliminar el contenedor"
		;;
	"draco-mysql")
		stoppingContainersDraco
		echo -e "Starting containers:  \033[1mDraco and a \033[1mMySQL\033[0m database."
		echo ""
		${dockerCmd} ${envFileDraco} -f draco/draco-mysql.yml up -d --renew-anon-volumes
		displayServices "draco"
		waitForMysql
		waitForDraco
		;;
	"draco-mongo")
		stoppingContainersDraco
		echo -e "Starting containers:  \033[1mDraco and a \033[1mMongoDB\033[0m database."
		echo ""
		${dockerCmd}  ${envFileDraco} -f draco/draco-mongo.yml up -d --renew-anon-volumes

		
		displayServices "draco"
		waitForMongoDraco
		waitForDraco
		waitForDracoInit
  		docker rm fiware-draco-init-1 > /dev/null 2>&1 || echo "⚠️ No se pudo eliminar el contenedor"

		;;
	"draco-postgres")
		stoppingContainersDraco
		echo -e "Starting containers:  \033[1mDraco and a \033[1mPostgreSQL\033[0m database."
		echo ""
		${dockerCmd}  ${envFileDraco} -f draco/draco-postgres.yml up -d --renew-anon-volumes
		displayServices "draco"
		waitForPostgres
		waitForDraco
		;;
	"nginx")
		echo "Starting Nginx"
		${dockerCmd} ${envFileProxyReverse} -f proxy-reverse/nginx-reverse.yml up -d
		displayServices "nginx-reverse"
		waitForProxyReverse
		;;
	"stop-orion")
		stoppingContainersOrion
		;;

	"stop-draco")
		stoppingContainersDraco
		;;
	"stop-simulator")
		stoppingContainerAppSimulator
		;;
	"stop-subs-control-app")
		stoppingContainerAppSubsControl
		;;
	"stop-apis-app")
		${dockerCmd} ${envFileApisApp} -f apis_app/apis-app.yml down
		stopContainerApisApp
		;;
	"stop")
		stoppingContainersOrion
		stoppingContainersDraco
		stoppingContainerAppSimulator
		stoppingContainerAppSubsControl
		;;
	"start1")
		./services  orion 
		
		if [[ $argument == "mysql" ]]; then
			./services  draco-mysql
		elif [[ $argument == "postgres" ]]; then
			./services  draco-postgres
		else
			./services  draco-mongo
		fi
		
		./services  minio-bucket

		;;
	"start2")
		./services simulator
		;;
	"start3")
		./services apis-app
		;;
	"simulator")
		# python3 scripts/simulatorDocker/iniciarSimulator.py
		stoppingContainerAppSimulator
		echo -e "Starting containers:  \033[1mSimulator app .\033[0m"
		echo ""
		
		${dockerCmd} ${envFileSimulator} -f simulator/simulator-app.yml up -d 
		displayServices "simulator-app"
		waitForSimulatorApp		
		;;
	"subs-control-app")
		stoppingContainerAppSubsControl
		echo -e "Starting containers:  \033[1mSubs Control app .\033[0m"
		echo ""

		${dockerCmd} ${envFileSubsControl} -f subs-control/subs-control-app.yml up -d
		displayServices "subs-control-app"
		waitForSubsControlApp

		;;
	"minio-bucket")
		echo "Starting Minio"
		echo ""
		bash ./bucket_minio/start_bucket.sh service
		displayServices "minio-bucket"
		waitForMinioBucket
		;;
	"apis-app-build")
		echo "Building Apis App"
		echo ""
		${dockerCmd} ${envFileApisApp} -f apis_app/apis-app.yml build
		;;
	"apis-app")
		echo "Starting Apis App"
		echo ""
		# ${dockerCmd} ${envFileApisApp} -f apis_app/apis-app.yml build
		${dockerCmd} ${envFileApisApp} -f apis_app/apis-app.yml up -d
		displayServices "apis-app"
		waitForApisApp
		;;
	"stop-apis-app")
		${dockerCmd} ${envFileApisApp} -f apis_app/apis-app.yml down
		stopContainerApisApp
		;;
	"prune")
		echo "Pruning unused Docker resources"
		docker system prune -f
		docker volume prune -f
		docker network prune -f
		;;
	*)
		echo "Command not Found."
		echo -e "usage: ./services [create|start|stop\n\t\torion|stop-orion\n\t\tdraco|draco-mysql|draco-mongo|draco-postgres|stop-draco\n\t\tsimulator|simulator-marta]"
		exit 127;
		;;
esac

if [[ $proxyReverse == true ]]; then
	./proxy-reverse/red_proxy up
	# ./proxy-reverse/red_proxy default
fi


# Verificar si proxy-reverse/base.conf es igual a default.conf y eliminar el contenedor proxy-reverse si es así
if cmp -s "./proxy-reverse/base.conf" "./proxy-reverse/default.conf"; then
	echo "Eliminando el contenedor proxy-reverse."
	stoppingContainerProxyReverse
fi
